

/*
 * Forms Service by Adobe API (Cloud Foundry)
 * The SAP Forms service by Adobe is a cloud service based on the ADS (Adobe Document Services). The Forms service REST API provides a subset of the SAP Forms service capabilities. They are addressed by different URIs (Uniform Resource Identifiers) where each URI supports data and document exchange in a JSON format. The SAP Forms service REST API delivers a comprehensive description and is easy to test. The application calls the REST API via an SAP BTP subaccount that must be subscribed to the SAP Forms service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package customer.caplabelprinting1.btpservice.ads.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * XdpTemplate file and XmlData file are encoded in BASE64. &lt;br /&gt;&lt;br /&gt;**For rendering, templates can be retrieved directly from the data storage:** &lt;br /&gt;&lt;br /&gt;As value field of key field &#39;xdpTemplate&#39; include either &#x60;{your_formName}/{your_templateName}&#x60; + as QueryParam add &#x60;?templateSource &#x3D; storageName&#x60;or &#x60;{your_formName}/{your_templateObjectId}&#x60; + as QueryParam add &#x60;?templateSource &#x3D; storageId&#x60;.&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;**FormType Options:** [Print] - &#x60;default&#x60;, [Interactive], [DynamicInteractive]. &lt;br /&gt;&lt;br /&gt;**FormLocale Options:**  Combination of ISO-639 language code and ISO-3166 country code (language_country)., [en_US] - &#x60;default&#x60;. &lt;br /&gt;&lt;br /&gt;**TaggedPDF Options:** [1] - &#x60;default&#x60;, [0]. &lt;br /&gt;&lt;br /&gt;**EmbedFont Options:** [1], [0] - &#x60;default&#x60;. &lt;br /&gt;&lt;br /&gt;**ChangeNotAllowed Options:** [false] - &#x60;default&#x60;, [true]. &lt;br /&gt;&lt;br /&gt;**PrintNotAllowed Options:** [false] - &#x60;default&#x60;, [true]. 
 */
// CHECKSTYLE:OFF
public class RenderInput 
// CHECKSTYLE:ON
{
  @JsonProperty("changeNotAllowed")
  private Boolean changeNotAllowed = false;

  /**
   * Gets or Sets embedFont
   */
  public enum EmbedFontEnum {
    /**
    * The NUMBER_0 option of this RenderInput
    */
    NUMBER_0(0),
    
    /**
    * The NUMBER_1 option of this RenderInput
    */
    NUMBER_1(1);

    private Integer value;

    EmbedFontEnum(Integer value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public Integer getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The String value
    * @return The enum value of type RenderInput
    */
    @JsonCreator
    @Nonnull public static EmbedFontEnum fromValue(@Nonnull final Integer value) {
      for (EmbedFontEnum b : EmbedFontEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("embedFont")
  private EmbedFontEnum embedFont = EmbedFontEnum.NUMBER_0;

  @JsonProperty("formLocale")
  private String formLocale = "en_US";

  /**
   * Gets or Sets formType
   */
  public enum FormTypeEnum {
    /**
    * The INTERACTIVE option of this RenderInput
    */
    INTERACTIVE("interactive"),
    
    /**
    * The PRINT option of this RenderInput
    */
    PRINT("print"),
    
    /**
    * The DYNAMIC_INTERACTIVE option of this RenderInput
    */
    DYNAMIC_INTERACTIVE("dynamicInteractive");

    private String value;

    FormTypeEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The String value
    * @return The enum value of type RenderInput
    */
    @JsonCreator
    @Nonnull public static FormTypeEnum fromValue(@Nonnull final String value) {
      for (FormTypeEnum b : FormTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("formType")
  private FormTypeEnum formType = FormTypeEnum.PRINT;

  @JsonProperty("printNotAllowed")
  private Boolean printNotAllowed = false;

  /**
   * Gets or Sets taggedPdf
   */
  public enum TaggedPdfEnum {
    /**
    * The NUMBER_0 option of this RenderInput
    */
    NUMBER_0(0),
    
    /**
    * The NUMBER_1 option of this RenderInput
    */
    NUMBER_1(1);

    private Integer value;

    TaggedPdfEnum(Integer value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public Integer getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The String value
    * @return The enum value of type RenderInput
    */
    @JsonCreator
    @Nonnull public static TaggedPdfEnum fromValue(@Nonnull final Integer value) {
      for (TaggedPdfEnum b : TaggedPdfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("taggedPdf")
  private TaggedPdfEnum taggedPdf = TaggedPdfEnum.NUMBER_1;

  @JsonProperty("xdpTemplate")
  private String xdpTemplate = "Base64 String";

  @JsonProperty("xmlData")
  private String xmlData = "Base64 String";

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

   /**
    * Set the changeNotAllowed of this {@link RenderInput} instance and return the same instance.
    *
    * @param changeNotAllowed  The changeNotAllowed of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput changeNotAllowed(@Nonnull final Boolean changeNotAllowed) {
    this.changeNotAllowed = changeNotAllowed;
    return this;
  }

   /**
    * Get changeNotAllowed
    * @return changeNotAllowed  The changeNotAllowed of this {@link RenderInput} instance.
    */
  @Nonnull public Boolean isChangeNotAllowed() {
    return changeNotAllowed;
  }

  /**
   * Set the changeNotAllowed of this {@link RenderInput} instance.
   *
   * @param changeNotAllowed  The changeNotAllowed of this {@link RenderInput}
   */
  public void setChangeNotAllowed( @Nonnull final Boolean changeNotAllowed) {
    this.changeNotAllowed = changeNotAllowed;
  }

   /**
    * Set the embedFont of this {@link RenderInput} instance and return the same instance.
    *
    * @param embedFont  The embedFont of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput embedFont(@Nonnull final EmbedFontEnum embedFont) {
    this.embedFont = embedFont;
    return this;
  }

   /**
    * Get embedFont
    * @return embedFont  The embedFont of this {@link RenderInput} instance.
    */
  @Nonnull public EmbedFontEnum getEmbedFont() {
    return embedFont;
  }

  /**
   * Set the embedFont of this {@link RenderInput} instance.
   *
   * @param embedFont  The embedFont of this {@link RenderInput}
   */
  public void setEmbedFont( @Nonnull final EmbedFontEnum embedFont) {
    this.embedFont = embedFont;
  }

   /**
    * Set the formLocale of this {@link RenderInput} instance and return the same instance.
    *
    * @param formLocale  The formLocale of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput formLocale(@Nonnull final String formLocale) {
    this.formLocale = formLocale;
    return this;
  }

   /**
    * Get formLocale
    * @return formLocale  The formLocale of this {@link RenderInput} instance.
    */
  @Nonnull public String getFormLocale() {
    return formLocale;
  }

  /**
   * Set the formLocale of this {@link RenderInput} instance.
   *
   * @param formLocale  The formLocale of this {@link RenderInput}
   */
  public void setFormLocale( @Nonnull final String formLocale) {
    this.formLocale = formLocale;
  }

   /**
    * Set the formType of this {@link RenderInput} instance and return the same instance.
    *
    * @param formType  The formType of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput formType(@Nonnull final FormTypeEnum formType) {
    this.formType = formType;
    return this;
  }

   /**
    * Get formType
    * @return formType  The formType of this {@link RenderInput} instance.
    */
  @Nonnull public FormTypeEnum getFormType() {
    return formType;
  }

  /**
   * Set the formType of this {@link RenderInput} instance.
   *
   * @param formType  The formType of this {@link RenderInput}
   */
  public void setFormType( @Nonnull final FormTypeEnum formType) {
    this.formType = formType;
  }

   /**
    * Set the printNotAllowed of this {@link RenderInput} instance and return the same instance.
    *
    * @param printNotAllowed  The printNotAllowed of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput printNotAllowed(@Nonnull final Boolean printNotAllowed) {
    this.printNotAllowed = printNotAllowed;
    return this;
  }

   /**
    * Get printNotAllowed
    * @return printNotAllowed  The printNotAllowed of this {@link RenderInput} instance.
    */
  @Nonnull public Boolean isPrintNotAllowed() {
    return printNotAllowed;
  }

  /**
   * Set the printNotAllowed of this {@link RenderInput} instance.
   *
   * @param printNotAllowed  The printNotAllowed of this {@link RenderInput}
   */
  public void setPrintNotAllowed( @Nonnull final Boolean printNotAllowed) {
    this.printNotAllowed = printNotAllowed;
  }

   /**
    * Set the taggedPdf of this {@link RenderInput} instance and return the same instance.
    *
    * @param taggedPdf  The taggedPdf of this {@link RenderInput}
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput taggedPdf(@Nonnull final TaggedPdfEnum taggedPdf) {
    this.taggedPdf = taggedPdf;
    return this;
  }

   /**
    * Get taggedPdf
    * @return taggedPdf  The taggedPdf of this {@link RenderInput} instance.
    */
  @Nonnull public TaggedPdfEnum getTaggedPdf() {
    return taggedPdf;
  }

  /**
   * Set the taggedPdf of this {@link RenderInput} instance.
   *
   * @param taggedPdf  The taggedPdf of this {@link RenderInput}
   */
  public void setTaggedPdf( @Nonnull final TaggedPdfEnum taggedPdf) {
    this.taggedPdf = taggedPdf;
  }

   /**
    * Set the xdpTemplate of this {@link RenderInput} instance and return the same instance.
    *
    * @param xdpTemplate  File encoded as Base64 string
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput xdpTemplate(@Nonnull final String xdpTemplate) {
    this.xdpTemplate = xdpTemplate;
    return this;
  }

   /**
    * File encoded as Base64 string
    * @return xdpTemplate  The xdpTemplate of this {@link RenderInput} instance.
    */
  @Nonnull public String getXdpTemplate() {
    return xdpTemplate;
  }

  /**
   * Set the xdpTemplate of this {@link RenderInput} instance.
   *
   * @param xdpTemplate  File encoded as Base64 string
   */
  public void setXdpTemplate( @Nonnull final String xdpTemplate) {
    this.xdpTemplate = xdpTemplate;
  }

   /**
    * Set the xmlData of this {@link RenderInput} instance and return the same instance.
    *
    * @param xmlData  File encoded as Base64 string
    * @return The same instance of this {@link RenderInput} class
    */
   @Nonnull public RenderInput xmlData(@Nonnull final String xmlData) {
    this.xmlData = xmlData;
    return this;
  }

   /**
    * File encoded as Base64 string
    * @return xmlData  The xmlData of this {@link RenderInput} instance.
    */
  @Nonnull public String getXmlData() {
    return xmlData;
  }

  /**
   * Set the xmlData of this {@link RenderInput} instance.
   *
   * @param xmlData  File encoded as Base64 string
   */
  public void setXmlData( @Nonnull final String xmlData) {
    this.xmlData = xmlData;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link RenderInput}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link RenderInput} instance.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("RenderInput has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link RenderInput} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final RenderInput renderInput = (RenderInput) o;
    return Objects.equals(this.cloudSdkCustomFields, renderInput.cloudSdkCustomFields) &&
        Objects.equals(this.changeNotAllowed, renderInput.changeNotAllowed) &&
        Objects.equals(this.embedFont, renderInput.embedFont) &&
        Objects.equals(this.formLocale, renderInput.formLocale) &&
        Objects.equals(this.formType, renderInput.formType) &&
        Objects.equals(this.printNotAllowed, renderInput.printNotAllowed) &&
        Objects.equals(this.taggedPdf, renderInput.taggedPdf) &&
        Objects.equals(this.xdpTemplate, renderInput.xdpTemplate) &&
        Objects.equals(this.xmlData, renderInput.xmlData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeNotAllowed, embedFont, formLocale, formType, printNotAllowed, taggedPdf, xdpTemplate, xmlData, cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class RenderInput {\n");
    sb.append("    changeNotAllowed: ").append(toIndentedString(changeNotAllowed)).append("\n");
    sb.append("    embedFont: ").append(toIndentedString(embedFont)).append("\n");
    sb.append("    formLocale: ").append(toIndentedString(formLocale)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    printNotAllowed: ").append(toIndentedString(printNotAllowed)).append("\n");
    sb.append("    taggedPdf: ").append(toIndentedString(taggedPdf)).append("\n");
    sb.append("    xdpTemplate: ").append(toIndentedString(xdpTemplate)).append("\n");
    sb.append("    xmlData: ").append(toIndentedString(xmlData)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

